// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: src/grpc/protobufs/user_tracking.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompressServiceClient is the client API for CompressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompressServiceClient interface {
	Compress(ctx context.Context, in *RequestCompress, opts ...grpc.CallOption) (*ResponseCompress, error)
}

type compressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompressServiceClient(cc grpc.ClientConnInterface) CompressServiceClient {
	return &compressServiceClient{cc}
}

func (c *compressServiceClient) Compress(ctx context.Context, in *RequestCompress, opts ...grpc.CallOption) (*ResponseCompress, error) {
	out := new(ResponseCompress)
	err := c.cc.Invoke(ctx, "/compress.service.v1.CompressService/Compress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompressServiceServer is the server API for CompressService service.
// All implementations must embed UnimplementedCompressServiceServer
// for forward compatibility
type CompressServiceServer interface {
	Compress(context.Context, *RequestCompress) (*ResponseCompress, error)
	mustEmbedUnimplementedCompressServiceServer()
}

// UnimplementedCompressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompressServiceServer struct {
}

func (UnimplementedCompressServiceServer) Compress(context.Context, *RequestCompress) (*ResponseCompress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compress not implemented")
}
func (UnimplementedCompressServiceServer) mustEmbedUnimplementedCompressServiceServer() {}

// UnsafeCompressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompressServiceServer will
// result in compilation errors.
type UnsafeCompressServiceServer interface {
	mustEmbedUnimplementedCompressServiceServer()
}

func RegisterCompressServiceServer(s grpc.ServiceRegistrar, srv CompressServiceServer) {
	s.RegisterService(&CompressService_ServiceDesc, srv)
}

func _CompressService_Compress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCompress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressServiceServer).Compress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compress.service.v1.CompressService/Compress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressServiceServer).Compress(ctx, req.(*RequestCompress))
	}
	return interceptor(ctx, in, info, handler)
}

// CompressService_ServiceDesc is the grpc.ServiceDesc for CompressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compress.service.v1.CompressService",
	HandlerType: (*CompressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compress",
			Handler:    _CompressService_Compress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/protobufs/user_tracking.proto",
}

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	RegisterDevice(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Device, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) RegisterDevice(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/compress.service.v1.DeviceService/RegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	RegisterDevice(context.Context, *DeviceInfo) (*Device, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) RegisterDevice(context.Context, *DeviceInfo) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compress.service.v1.DeviceService/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RegisterDevice(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compress.service.v1.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _DeviceService_RegisterDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/grpc/protobufs/user_tracking.proto",
}
