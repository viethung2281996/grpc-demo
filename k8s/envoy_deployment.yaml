apiVersion: apps/v1
kind: Deployment
metadata:
  name: digienty-envoy-deployment
  labels:
    app: digienty-envoy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: digienty-envoy
  template:
    metadata:
      labels:
        app: digienty-envoy
    spec:
      containers:
        - name: digienty-envoy
          image: envoyproxy/envoy:v1.23-latest
          imagePullPolicy: Always
          resources:
            requests:
              memory: 70Mi
              cpu: 80m
            limits:
              memory: 1Gi
          ports:
            - containerPort: 8080
          volumeMounts:
          - name: envoy-config
            mountPath: /etc/envoy
            # subPath: envoy.yaml
      imagePullSecrets:
        - name: registrypullsecret
      volumes:
        - name: envoy-config
          configMap:
            name: envoy-config
---
apiVersion: v1
kind: Service
metadata:
  name: digienty-envoy-services
  labels:
    app: digienty-envoy
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
      name: envoy-http2
  selector:
    app: digienty-envoy
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
data:
  envoy.yaml: |-
    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address: { address: 0.0.0.0, port_value: 9901 }

    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address: { address: 0.0.0.0, port_value: 8080 }
          filter_chains:
            - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  codec_type: auto
                  stat_prefix: ingress_http
                  route_config:
                    name: local_route
                    virtual_hosts:
                      - name: local_service
                        domains: ["*"]
                        routes:
                          - match: { prefix: "/" }
                            route:
                              cluster: wp-web-push-grpc-services
                              timeout: 0s
                              max_stream_duration:
                                grpc_timeout_header_max: 0s
                        cors:
                          allow_origin_string_match:
                            - prefix: "*"
                          allow_methods: GET, PUT, DELETE, POST, OPTIONS
                          allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                          max_age: "1728000"
                          expose_headers: custom-header-1,grpc-status,grpc-message
                  http2_protocol_options:
                    max_concurrent_streams: 100
                    initial_stream_window_size: 65536  # 64 KiB
                    initial_connection_window_size: 1048576  # 1 MiB
                  access_log:
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                  http_filters:
                    - name: envoy.filters.http.grpc_web
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                    - name: envoy.filters.http.cors
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                    - name: envoy.filters.http.router
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
        - name: wp-web-push-grpc-services
          connect_timeout: 0.5s
          type: logical_dns
          http2_protocol_options: {}
          lb_policy: round_robin
          load_assignment:
            cluster_name: cluster_0
            endpoints:
              - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: flask-app-services
                        port_value: 80
                
    layered_runtime:
      layers:
      - name: static_layer_0
        static_layer:
          envoy:
            resource_limits:
              listener:
                listener_0:
                  connection_limit: 10000
          overload:
            global_downstream_max_connections: 50000
