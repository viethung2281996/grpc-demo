// source: user_tracking.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.compress.service.v1.CompressionType', null, global);
goog.exportSymbol('proto.compress.service.v1.Device', null, global);
goog.exportSymbol('proto.compress.service.v1.DeviceInfo', null, global);
goog.exportSymbol('proto.compress.service.v1.DeviceInfo.Identity', null, global);
goog.exportSymbol('proto.compress.service.v1.Network', null, global);
goog.exportSymbol('proto.compress.service.v1.Os', null, global);
goog.exportSymbol('proto.compress.service.v1.RequestCompress', null, global);
goog.exportSymbol('proto.compress.service.v1.ResponseCompress', null, global);
goog.exportSymbol('proto.compress.service.v1.Screen', null, global);
goog.exportSymbol('proto.compress.service.v1.Sdk', null, global);
goog.exportSymbol('proto.compress.service.v1.Web', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compress.service.v1.RequestCompress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.compress.service.v1.RequestCompress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.compress.service.v1.RequestCompress.displayName = 'proto.compress.service.v1.RequestCompress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compress.service.v1.ResponseCompress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.compress.service.v1.ResponseCompress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.compress.service.v1.ResponseCompress.displayName = 'proto.compress.service.v1.ResponseCompress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compress.service.v1.Sdk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.compress.service.v1.Sdk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.compress.service.v1.Sdk.displayName = 'proto.compress.service.v1.Sdk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compress.service.v1.Os = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.compress.service.v1.Os, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.compress.service.v1.Os.displayName = 'proto.compress.service.v1.Os';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compress.service.v1.Network = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.compress.service.v1.Network, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.compress.service.v1.Network.displayName = 'proto.compress.service.v1.Network';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compress.service.v1.Screen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.compress.service.v1.Screen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.compress.service.v1.Screen.displayName = 'proto.compress.service.v1.Screen';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compress.service.v1.Web = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.compress.service.v1.Web, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.compress.service.v1.Web.displayName = 'proto.compress.service.v1.Web';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compress.service.v1.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.compress.service.v1.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.compress.service.v1.Device.displayName = 'proto.compress.service.v1.Device';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compress.service.v1.DeviceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.compress.service.v1.DeviceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.compress.service.v1.DeviceInfo.displayName = 'proto.compress.service.v1.DeviceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.compress.service.v1.DeviceInfo.Identity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.compress.service.v1.DeviceInfo.Identity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.compress.service.v1.DeviceInfo.Identity.displayName = 'proto.compress.service.v1.DeviceInfo.Identity';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compress.service.v1.RequestCompress.prototype.toObject = function(opt_includeInstance) {
  return proto.compress.service.v1.RequestCompress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compress.service.v1.RequestCompress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.RequestCompress.toObject = function(includeInstance, msg) {
  var f, obj = {
    compressionType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compress.service.v1.RequestCompress}
 */
proto.compress.service.v1.RequestCompress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compress.service.v1.RequestCompress;
  return proto.compress.service.v1.RequestCompress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compress.service.v1.RequestCompress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compress.service.v1.RequestCompress}
 */
proto.compress.service.v1.RequestCompress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.compress.service.v1.CompressionType} */ (reader.readEnum());
      msg.setCompressionType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compress.service.v1.RequestCompress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compress.service.v1.RequestCompress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compress.service.v1.RequestCompress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.RequestCompress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompressionType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional CompressionType compression_type = 1;
 * @return {!proto.compress.service.v1.CompressionType}
 */
proto.compress.service.v1.RequestCompress.prototype.getCompressionType = function() {
  return /** @type {!proto.compress.service.v1.CompressionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.compress.service.v1.CompressionType} value
 * @return {!proto.compress.service.v1.RequestCompress} returns this
 */
proto.compress.service.v1.RequestCompress.prototype.setCompressionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {string}
 */
proto.compress.service.v1.RequestCompress.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.compress.service.v1.RequestCompress.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.compress.service.v1.RequestCompress.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.compress.service.v1.RequestCompress} returns this
 */
proto.compress.service.v1.RequestCompress.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compress.service.v1.ResponseCompress.prototype.toObject = function(opt_includeInstance) {
  return proto.compress.service.v1.ResponseCompress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compress.service.v1.ResponseCompress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.ResponseCompress.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compress.service.v1.ResponseCompress}
 */
proto.compress.service.v1.ResponseCompress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compress.service.v1.ResponseCompress;
  return proto.compress.service.v1.ResponseCompress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compress.service.v1.ResponseCompress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compress.service.v1.ResponseCompress}
 */
proto.compress.service.v1.ResponseCompress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compress.service.v1.ResponseCompress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compress.service.v1.ResponseCompress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compress.service.v1.ResponseCompress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.ResponseCompress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.compress.service.v1.ResponseCompress.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.compress.service.v1.ResponseCompress.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.compress.service.v1.ResponseCompress.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.compress.service.v1.ResponseCompress} returns this
 */
proto.compress.service.v1.ResponseCompress.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compress.service.v1.Sdk.prototype.toObject = function(opt_includeInstance) {
  return proto.compress.service.v1.Sdk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compress.service.v1.Sdk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.Sdk.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    source: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    version: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compress.service.v1.Sdk}
 */
proto.compress.service.v1.Sdk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compress.service.v1.Sdk;
  return proto.compress.service.v1.Sdk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compress.service.v1.Sdk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compress.service.v1.Sdk}
 */
proto.compress.service.v1.Sdk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compress.service.v1.Sdk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compress.service.v1.Sdk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compress.service.v1.Sdk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.Sdk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.compress.service.v1.Sdk.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Sdk} returns this
 */
proto.compress.service.v1.Sdk.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source = 2;
 * @return {string}
 */
proto.compress.service.v1.Sdk.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Sdk} returns this
 */
proto.compress.service.v1.Sdk.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.compress.service.v1.Sdk.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Sdk} returns this
 */
proto.compress.service.v1.Sdk.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.compress.service.v1.Sdk.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Sdk} returns this
 */
proto.compress.service.v1.Sdk.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compress.service.v1.Os.prototype.toObject = function(opt_includeInstance) {
  return proto.compress.service.v1.Os.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compress.service.v1.Os} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.Os.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compress.service.v1.Os}
 */
proto.compress.service.v1.Os.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compress.service.v1.Os;
  return proto.compress.service.v1.Os.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compress.service.v1.Os} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compress.service.v1.Os}
 */
proto.compress.service.v1.Os.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compress.service.v1.Os.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compress.service.v1.Os.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compress.service.v1.Os} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.Os.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.compress.service.v1.Os.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Os} returns this
 */
proto.compress.service.v1.Os.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.compress.service.v1.Os.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Os} returns this
 */
proto.compress.service.v1.Os.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compress.service.v1.Network.prototype.toObject = function(opt_includeInstance) {
  return proto.compress.service.v1.Network.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compress.service.v1.Network} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.Network.toObject = function(includeInstance, msg) {
  var f, obj = {
    cellular: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    bluetooth: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    wifi: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    address: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compress.service.v1.Network}
 */
proto.compress.service.v1.Network.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compress.service.v1.Network;
  return proto.compress.service.v1.Network.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compress.service.v1.Network} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compress.service.v1.Network}
 */
proto.compress.service.v1.Network.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCellular(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBluetooth(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWifi(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compress.service.v1.Network.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compress.service.v1.Network.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compress.service.v1.Network} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.Network.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCellular();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getBluetooth();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getWifi();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool cellular = 1;
 * @return {boolean}
 */
proto.compress.service.v1.Network.prototype.getCellular = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.compress.service.v1.Network} returns this
 */
proto.compress.service.v1.Network.prototype.setCellular = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool bluetooth = 2;
 * @return {boolean}
 */
proto.compress.service.v1.Network.prototype.getBluetooth = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.compress.service.v1.Network} returns this
 */
proto.compress.service.v1.Network.prototype.setBluetooth = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool wifi = 3;
 * @return {boolean}
 */
proto.compress.service.v1.Network.prototype.getWifi = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.compress.service.v1.Network} returns this
 */
proto.compress.service.v1.Network.prototype.setWifi = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string address = 4;
 * @return {string}
 */
proto.compress.service.v1.Network.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Network} returns this
 */
proto.compress.service.v1.Network.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compress.service.v1.Screen.prototype.toObject = function(opt_includeInstance) {
  return proto.compress.service.v1.Screen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compress.service.v1.Screen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.Screen.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compress.service.v1.Screen}
 */
proto.compress.service.v1.Screen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compress.service.v1.Screen;
  return proto.compress.service.v1.Screen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compress.service.v1.Screen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compress.service.v1.Screen}
 */
proto.compress.service.v1.Screen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compress.service.v1.Screen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compress.service.v1.Screen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compress.service.v1.Screen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.Screen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 width = 1;
 * @return {number}
 */
proto.compress.service.v1.Screen.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.compress.service.v1.Screen} returns this
 */
proto.compress.service.v1.Screen.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.compress.service.v1.Screen.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.compress.service.v1.Screen} returns this
 */
proto.compress.service.v1.Screen.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compress.service.v1.Web.prototype.toObject = function(opt_includeInstance) {
  return proto.compress.service.v1.Web.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compress.service.v1.Web} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.Web.toObject = function(includeInstance, msg) {
  var f, obj = {
    browser: jspb.Message.getFieldWithDefault(msg, 1, ""),
    device: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orientation: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compress.service.v1.Web}
 */
proto.compress.service.v1.Web.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compress.service.v1.Web;
  return proto.compress.service.v1.Web.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compress.service.v1.Web} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compress.service.v1.Web}
 */
proto.compress.service.v1.Web.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrowser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrientation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compress.service.v1.Web.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compress.service.v1.Web.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compress.service.v1.Web} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.Web.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrowser();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrientation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string browser = 1;
 * @return {string}
 */
proto.compress.service.v1.Web.prototype.getBrowser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Web} returns this
 */
proto.compress.service.v1.Web.prototype.setBrowser = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device = 2;
 * @return {string}
 */
proto.compress.service.v1.Web.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Web} returns this
 */
proto.compress.service.v1.Web.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.compress.service.v1.Web.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Web} returns this
 */
proto.compress.service.v1.Web.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string orientation = 4;
 * @return {string}
 */
proto.compress.service.v1.Web.prototype.getOrientation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Web} returns this
 */
proto.compress.service.v1.Web.prototype.setOrientation = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compress.service.v1.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.compress.service.v1.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compress.service.v1.Device} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
    dId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    profileId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 7, ""),
    os: (f = msg.getOs()) && proto.compress.service.v1.Os.toObject(includeInstance, f),
    network: (f = msg.getNetwork()) && proto.compress.service.v1.Network.toObject(includeInstance, f),
    screen: (f = msg.getScreen()) && proto.compress.service.v1.Screen.toObject(includeInstance, f),
    locale: jspb.Message.getFieldWithDefault(msg, 11, ""),
    timezone: jspb.Message.getFieldWithDefault(msg, 12, ""),
    web: (f = msg.getWeb()) && proto.compress.service.v1.Web.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compress.service.v1.Device}
 */
proto.compress.service.v1.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compress.service.v1.Device;
  return proto.compress.service.v1.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compress.service.v1.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compress.service.v1.Device}
 */
proto.compress.service.v1.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfileId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 8:
      var value = new proto.compress.service.v1.Os;
      reader.readMessage(value,proto.compress.service.v1.Os.deserializeBinaryFromReader);
      msg.setOs(value);
      break;
    case 9:
      var value = new proto.compress.service.v1.Network;
      reader.readMessage(value,proto.compress.service.v1.Network.deserializeBinaryFromReader);
      msg.setNetwork(value);
      break;
    case 10:
      var value = new proto.compress.service.v1.Screen;
      reader.readMessage(value,proto.compress.service.v1.Screen.deserializeBinaryFromReader);
      msg.setScreen(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocale(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    case 13:
      var value = new proto.compress.service.v1.Web;
      reader.readMessage(value,proto.compress.service.v1.Web.deserializeBinaryFromReader);
      msg.setWeb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compress.service.v1.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compress.service.v1.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compress.service.v1.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProfileId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOs();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.compress.service.v1.Os.serializeBinaryToWriter
    );
  }
  f = message.getNetwork();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.compress.service.v1.Network.serializeBinaryToWriter
    );
  }
  f = message.getScreen();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.compress.service.v1.Screen.serializeBinaryToWriter
    );
  }
  f = message.getLocale();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getWeb();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.compress.service.v1.Web.serializeBinaryToWriter
    );
  }
};


/**
 * optional string d_id = 1;
 * @return {string}
 */
proto.compress.service.v1.Device.prototype.getDId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.setDId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string t_id = 2;
 * @return {string}
 */
proto.compress.service.v1.Device.prototype.getTId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.setTId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string u_id = 3;
 * @return {string}
 */
proto.compress.service.v1.Device.prototype.getUId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.setUId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string device_id = 4;
 * @return {string}
 */
proto.compress.service.v1.Device.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string profile_id = 5;
 * @return {string}
 */
proto.compress.service.v1.Device.prototype.getProfileId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.setProfileId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string type = 6;
 * @return {string}
 */
proto.compress.service.v1.Device.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string channel = 7;
 * @return {string}
 */
proto.compress.service.v1.Device.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional Os os = 8;
 * @return {?proto.compress.service.v1.Os}
 */
proto.compress.service.v1.Device.prototype.getOs = function() {
  return /** @type{?proto.compress.service.v1.Os} */ (
    jspb.Message.getWrapperField(this, proto.compress.service.v1.Os, 8));
};


/**
 * @param {?proto.compress.service.v1.Os|undefined} value
 * @return {!proto.compress.service.v1.Device} returns this
*/
proto.compress.service.v1.Device.prototype.setOs = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.clearOs = function() {
  return this.setOs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.compress.service.v1.Device.prototype.hasOs = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Network network = 9;
 * @return {?proto.compress.service.v1.Network}
 */
proto.compress.service.v1.Device.prototype.getNetwork = function() {
  return /** @type{?proto.compress.service.v1.Network} */ (
    jspb.Message.getWrapperField(this, proto.compress.service.v1.Network, 9));
};


/**
 * @param {?proto.compress.service.v1.Network|undefined} value
 * @return {!proto.compress.service.v1.Device} returns this
*/
proto.compress.service.v1.Device.prototype.setNetwork = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.clearNetwork = function() {
  return this.setNetwork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.compress.service.v1.Device.prototype.hasNetwork = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Screen screen = 10;
 * @return {?proto.compress.service.v1.Screen}
 */
proto.compress.service.v1.Device.prototype.getScreen = function() {
  return /** @type{?proto.compress.service.v1.Screen} */ (
    jspb.Message.getWrapperField(this, proto.compress.service.v1.Screen, 10));
};


/**
 * @param {?proto.compress.service.v1.Screen|undefined} value
 * @return {!proto.compress.service.v1.Device} returns this
*/
proto.compress.service.v1.Device.prototype.setScreen = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.clearScreen = function() {
  return this.setScreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.compress.service.v1.Device.prototype.hasScreen = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string locale = 11;
 * @return {string}
 */
proto.compress.service.v1.Device.prototype.getLocale = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.setLocale = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string timezone = 12;
 * @return {string}
 */
proto.compress.service.v1.Device.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional Web web = 13;
 * @return {?proto.compress.service.v1.Web}
 */
proto.compress.service.v1.Device.prototype.getWeb = function() {
  return /** @type{?proto.compress.service.v1.Web} */ (
    jspb.Message.getWrapperField(this, proto.compress.service.v1.Web, 13));
};


/**
 * @param {?proto.compress.service.v1.Web|undefined} value
 * @return {!proto.compress.service.v1.Device} returns this
*/
proto.compress.service.v1.Device.prototype.setWeb = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.compress.service.v1.Device} returns this
 */
proto.compress.service.v1.Device.prototype.clearWeb = function() {
  return this.setWeb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.compress.service.v1.Device.prototype.hasWeb = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compress.service.v1.DeviceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.compress.service.v1.DeviceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compress.service.v1.DeviceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.DeviceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    identity: (f = msg.getIdentity()) && proto.compress.service.v1.DeviceInfo.Identity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compress.service.v1.DeviceInfo}
 */
proto.compress.service.v1.DeviceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compress.service.v1.DeviceInfo;
  return proto.compress.service.v1.DeviceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compress.service.v1.DeviceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compress.service.v1.DeviceInfo}
 */
proto.compress.service.v1.DeviceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.compress.service.v1.DeviceInfo.Identity;
      reader.readMessage(value,proto.compress.service.v1.DeviceInfo.Identity.deserializeBinaryFromReader);
      msg.setIdentity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compress.service.v1.DeviceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compress.service.v1.DeviceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compress.service.v1.DeviceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.DeviceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.compress.service.v1.DeviceInfo.Identity.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.compress.service.v1.DeviceInfo.Identity.prototype.toObject = function(opt_includeInstance) {
  return proto.compress.service.v1.DeviceInfo.Identity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.compress.service.v1.DeviceInfo.Identity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.DeviceInfo.Identity.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sdk: (f = msg.getSdk()) && proto.compress.service.v1.Sdk.toObject(includeInstance, f),
    device: (f = msg.getDevice()) && proto.compress.service.v1.Device.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.compress.service.v1.DeviceInfo.Identity}
 */
proto.compress.service.v1.DeviceInfo.Identity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.compress.service.v1.DeviceInfo.Identity;
  return proto.compress.service.v1.DeviceInfo.Identity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.compress.service.v1.DeviceInfo.Identity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.compress.service.v1.DeviceInfo.Identity}
 */
proto.compress.service.v1.DeviceInfo.Identity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActionTime(value);
      break;
    case 2:
      var value = new proto.compress.service.v1.Sdk;
      reader.readMessage(value,proto.compress.service.v1.Sdk.deserializeBinaryFromReader);
      msg.setSdk(value);
      break;
    case 3:
      var value = new proto.compress.service.v1.Device;
      reader.readMessage(value,proto.compress.service.v1.Device.deserializeBinaryFromReader);
      msg.setDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.compress.service.v1.DeviceInfo.Identity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.compress.service.v1.DeviceInfo.Identity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.compress.service.v1.DeviceInfo.Identity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.compress.service.v1.DeviceInfo.Identity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionTime();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSdk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.compress.service.v1.Sdk.serializeBinaryToWriter
    );
  }
  f = message.getDevice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.compress.service.v1.Device.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 action_time = 1;
 * @return {number}
 */
proto.compress.service.v1.DeviceInfo.Identity.prototype.getActionTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.compress.service.v1.DeviceInfo.Identity} returns this
 */
proto.compress.service.v1.DeviceInfo.Identity.prototype.setActionTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Sdk sdk = 2;
 * @return {?proto.compress.service.v1.Sdk}
 */
proto.compress.service.v1.DeviceInfo.Identity.prototype.getSdk = function() {
  return /** @type{?proto.compress.service.v1.Sdk} */ (
    jspb.Message.getWrapperField(this, proto.compress.service.v1.Sdk, 2));
};


/**
 * @param {?proto.compress.service.v1.Sdk|undefined} value
 * @return {!proto.compress.service.v1.DeviceInfo.Identity} returns this
*/
proto.compress.service.v1.DeviceInfo.Identity.prototype.setSdk = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.compress.service.v1.DeviceInfo.Identity} returns this
 */
proto.compress.service.v1.DeviceInfo.Identity.prototype.clearSdk = function() {
  return this.setSdk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.compress.service.v1.DeviceInfo.Identity.prototype.hasSdk = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Device device = 3;
 * @return {?proto.compress.service.v1.Device}
 */
proto.compress.service.v1.DeviceInfo.Identity.prototype.getDevice = function() {
  return /** @type{?proto.compress.service.v1.Device} */ (
    jspb.Message.getWrapperField(this, proto.compress.service.v1.Device, 3));
};


/**
 * @param {?proto.compress.service.v1.Device|undefined} value
 * @return {!proto.compress.service.v1.DeviceInfo.Identity} returns this
*/
proto.compress.service.v1.DeviceInfo.Identity.prototype.setDevice = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.compress.service.v1.DeviceInfo.Identity} returns this
 */
proto.compress.service.v1.DeviceInfo.Identity.prototype.clearDevice = function() {
  return this.setDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.compress.service.v1.DeviceInfo.Identity.prototype.hasDevice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Identity identity = 1;
 * @return {?proto.compress.service.v1.DeviceInfo.Identity}
 */
proto.compress.service.v1.DeviceInfo.prototype.getIdentity = function() {
  return /** @type{?proto.compress.service.v1.DeviceInfo.Identity} */ (
    jspb.Message.getWrapperField(this, proto.compress.service.v1.DeviceInfo.Identity, 1));
};


/**
 * @param {?proto.compress.service.v1.DeviceInfo.Identity|undefined} value
 * @return {!proto.compress.service.v1.DeviceInfo} returns this
*/
proto.compress.service.v1.DeviceInfo.prototype.setIdentity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.compress.service.v1.DeviceInfo} returns this
 */
proto.compress.service.v1.DeviceInfo.prototype.clearIdentity = function() {
  return this.setIdentity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.compress.service.v1.DeviceInfo.prototype.hasIdentity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.compress.service.v1.CompressionType = {
  GZIP: 0,
  SNAPPY: 1
};

goog.object.extend(exports, proto.compress.service.v1);
